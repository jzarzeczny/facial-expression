name: publish

on:
  push:
    branches: ['main', '4-add-database-to-store-the-data-after-the-test']

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/facial-expression-image:latest

jobs:
  publish:
    name: publish image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Login
        run: |
          echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Publish
        run: |
          docker build \
                     --build-arg POSTGRES_USER=${POSTGRES_USER} \
                     --build-arg POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                     --build-arg POSTGRES_DB=${POSTGRES_DB} \
                     --tag ${REGISTRY}/${IMAGE_NAME} .
           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    needs: publish
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.WORK_DIR }}
            echo "POSTGRES_USER=my_user" > .env
            echo "POSTGRES_PASSWORD=my_password" >> .env
            echo "POSTGRES_DB=my_database" >> .env
            docker compose pull
            docker compose up -d

            rm .env
            exit
